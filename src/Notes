A component is a function returning a some Jsx;

we can create component using two ways  in React.

Functional components (also referred to as "presentational", "dumb" or "stateless" components - more about this later in the course) => const cmp = () => { return <div>some JSX</div> } (using ES6 arrow functions as shown here is recommended but optional)
class-based components (also referred to as "containers", "smart" or "stateful" components) => class Cmp extends Component { render () { return <div>some JSX</div> } } 

It is preferred way to create component use new js file and for using the new component we have to import hat into the app.js file.


Props : They are set and pass from the outside.
State : This is managed inside from a component.
This is used  to take attribute values which is passed to the selector. Also we can get the child value s using the props.\
like 

<created template name ="xyz" age =" 24"> 
    My name is test value
</created template>

We get name and age attribute values , inner values ( here we can get the  my name is test value ) such as ul tag ,any other component selector.

Getting the value of the props in the Functional components we hve to use {props.(attribute name)}.

Getting the value of the props in the class-based components we hve to use {this.props.(attribute name)}.

We can access children using props.children.

=========================================================================================================================================

Props

props  allow you to pass data from a parent (wrapping) component to a child (embedded) component.

Example:

AllPosts Component:

const posts = () => {
    return (
        <div>
            <Post title="My first Post" />
        </div>
    );
}
Here, title  is the custom property (prop ) set up on the custom Post  component. We basically replicate the default HTML attribute behavior we already know (e.g. <input type="text">  informs the browser about how to handle that input).

Post Component:

const post = (props) => {
    return (
        <div>
            <h1>{props.title}</h1>
        </div>
    );
}
The Post  component receives the props  argument. You can of course name this argument whatever you want - it's your function definition, React doesn't care! But React will pass one argument to your component function => An object, which contains all properties you set up on <Post ... /> .

{props.title}  then dynamically outputs the title  property of the props  object - which is available since we set the title  property inside AllPosts  component (see above).



State

Whilst props allow you to pass data down the component tree (and hence trigger an UI update), state is used to change the component, well, state from within. Changes to state also trigger an UI update.

Example:

NewPost Component:

class NewPost extends Component { // state can only be accessed in class-based components!
    state = {
        counter: 1
    };  
 
    render () { // Needs to be implemented in class-based components! Needs to return some JSX!
        return (
            <div>{this.state.counter}</div>
        );
    }
}
Here, the NewPost  component contains state . Only class-based components can define and use state . You can of course pass the state  down to functional components, but these then can't directly edit it.

state  simply is a property of the component class, you have to call it state  though - the name is not optional. You can then access it via this.state  in your class JSX code (which you return in the required render()  method).

Whenever state  changes (taught over the next lectures), the component will re-render and reflect the new state. The difference to props  is, that this happens within one and the same component - you don't receive new data (props ) from outside!

===============================================================================================================================

How we handle the state in the functional bse components.

 For this we have to user the useState react hook.

 StateFul component: is a component that manages states no matter if its using the useState hook or class based approach with the state property.
 stateless component:without internal state management.